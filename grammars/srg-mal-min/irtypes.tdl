basic-lex-rule := word-or-lexrule & 
  [ NEEDS-AFFIX bool,
    SYNSEM [ PUNCT #punct,
             LOCAL [ STR.HEADED solely,
                     COORD #coord,
                     COORD-REL #coord-rel,
                     COORD-STRAT #coord-strat ] ],
    DTR #dtr & word-or-lexrule & 
        [ SYNSEM [ PUNCT #punct,
                   LOCAL [ COORD #coord,
                           COORD-REL #coord-rel,
                           COORD-STRAT #coord-strat ] ] ],
    ARGS < #dtr > ].


lex-rule := basic-lex-rule & phrase-or-lexrule & 
  [ SYNSEM.LOCAL.CONT [ RELS [ LIST #first,
             LAST #last ],
        HCONS [ LIST #hfirst,
        LAST #hlast ] ],
    DTR.SYNSEM.LOCAL.CONT [ RELS [ LIST #first,
                   LAST #middle ],
          HCONS [ LIST #hfirst,
            LAST #hmiddle ] ],
    C-CONT [ RELS [ LIST #middle,
        LAST #last ],
       HCONS [ LIST #hmiddle,
         LAST #hlast ] ] ].

lexeme-to-word-rule := lex-rule &
  [ INFLECTED +,
    KEY-ARG #keyarg,   
    SYNSEM #synsem,
    DTR [ INFLECTED -,
          KEY-ARG #keyarg,   
          SYNSEM #synsem ],
    C-CONT.RELS <! !> ]
    """; Lexical rules vary on two dimensions: whether they are lexeme-to-lexeme
; or lexeme-to-word and whether or not they involve spelling changes.
; Accordingly, we define four subtypes of lex-rule, which have
; four cross-classified glb subtypes. Note that the lexeme/word distinction 
; is represented via a feature [INFLECTED bool] rather than as a type.  
; We find this more convenient, as it allows certain words to be [INFLECTED +] 
; from the start without having to twist the hierarchy too much (especially 
; if one makes use of defaults).

; Lexeme-to-word rules are hypothesized to monotonically add synsem information.
""".

lexeme-to-lexeme-rule := lex-rule & 
  [ INFLECTED #infl,
    SYNSEM.LOCAL.CAT.MC #mc,
    DTR [ INFLECTED #infl,
          SYNSEM.LOCAL.CAT.MC #mc ] ]
          """; Lexeme-to-lexeme rules can make more radical changes to the SYNSEM value.
""".


const-ltol-rule := lexeme-to-lexeme-rule & constant-lex-rule.

constant-lex-rule := lex-rule &
  [ STEM #stem,
    DTR.STEM #stem ]
    """; Spelling-preserving rules copy up the STEM (orthography) of the daughter.
""".


infl-ltow-rule := lexeme-to-word-rule & inflecting-lex-rule.

inflecting-lex-rule := lex-rule &
  [ NEEDS-AFFIX +,
    SYNSEM.SLSHD #slshd, 
    ARG-ST #arg-st,
    DTR [ SYNSEM.SLSHD #slshd, 
          ALTS #alts,
          ARG-ST #arg-st ],
    ALTS #alts ]
    """; Spelling changing rules. The LKB identifies these rules based on the NEEDS-AFFIX value. 
""".

n_fem-sg_ilr :=  n_sg_ilr & 
  [ SYNSEM.LOCAL.AGR.PNG.GEN fem ].
  
n_fem-sg-mal_ilr :=  n_sg-mal_ilr & 
  [ SYNSEM.LOCAL.AGR.PNG.GEN fem ].

n_sg_ilr :=  n_ilr & inflecting-lex-rule &
  [ SYNSEM #synsem & 
           [ LOCAL [ AGR #ind & [ PNG.PN 3sg ],
                     CAT.VAL.SPR #spr,
                     CONT.HOOK [ LTOP #ltop,
                                 INDEX #index ] ],
             LKEYS.KEYREL [ LBL #ltop,
                            ARG0 #index ] ],
    DTR.SYNSEM #synsem & 
               [ LOCAL [ CAT.VAL.SPR #spr & < [ LOCAL.AGR #ind ] >,
                         CONT.HOOK [ LTOP #ltop,
                                     INDEX #index ] ],
                 LKEYS.KEYREL [ LBL #ltop,
                                ARG0 #index ] ] ].


n_sg-mal_ilr :=  n_ilr & inflecting-lex-rule &
  [ SYNSEM #synsem & 
           [ LOCAL [ AGR [ PNG.PN 3sg ],
                     CAT.VAL.SPR #spr,
                     CONT.HOOK [ LTOP #ltop,
                                 INDEX #index ] ],
             LKEYS.KEYREL [ LBL #ltop,
                            ARG0 #index ] ],
    DTR.SYNSEM #synsem & 
               [ LOCAL [ CAT.VAL.SPR #spr,
                         CONT.HOOK [ LTOP #ltop,
                                     INDEX #index ] ],
                 LKEYS.KEYREL [ LBL #ltop,
                                ARG0 #index ] ] ].


n_ilr :=  tmt-lex-rule & phrase-or-lexrule & 
  [ NEEDS-AFFIX +,
    INFLECTED +,
    KEY-ARG #keyarg,   
    SYNSEM [ LIGHT #light,
             MODIFIED #modified,
             PUNCT #punct,
             LOCAL [ AGR [ PNG.PN 3per, 
                           PRONTYPE not_pron ],
                     COORD #coord,
                     COORD-REL #coord-rel,
                     COORD-STRAT #coord-strat,
                     CAT [ MC #mc,
                           HC-LIGHT #mc-light,
                           POSTHEAD #posthead,
                           HEAD #head,
                           VAL [ SUBJ #subj,
                                 COMPS #comps,
                                 SPEC #spec,
                                 --KEYCOMP #keycomp ] ],
                     CONT [ HCONS #hcons,
                            HOOK [ LTOP #ltop,
                                   XARG #xarg,
                                   INDEX [ SORT #sort, 
                                           PRONTYPE not_pron ] ],
                            RELS <! relation !> &
                                 [ LIST.REST #rest,
                                   LAST #last ] ],
                     CTXT #ctxt ],
             NON-LOCAL #nlocal,
             LKEYS [ ALTKEYREL #akey,
                     ALT2KEYREL #a2key,
                     --COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --OCOMP2KEY #oc2key ] ],
    DTR #dtr & word-or-lexrule &
        [ INFLECTED -,
          KEY-ARG #keyarg,   
          SYNSEM [ LIGHT #light,
                   MODIFIED #modified,
                   PUNCT #punct,
                   LOCAL [ AGR.PNG.PN 3per,
                           COORD #coord,
                           COORD-REL #coord-rel,
                           COORD-STRAT #coord-strat,
                           CAT [ MC #mc,
                                 HC-LIGHT #mc-light,
                                 POSTHEAD #posthead,
                                 HEAD #head & noun,
                                 VAL [ SUBJ #subj,
                                       COMPS #comps,
                                       SPEC #spec,
                                       --KEYCOMP #keycomp ] ],
                           CONT [ HCONS #hcons,
                                  HOOK [ LTOP #ltop,
                                         XARG #xarg,
                                         INDEX [ SORT #sort, 
                                                 PRONTYPE not_pron ] ],
                                  RELS [ LIST.REST #rest,
                                         LAST #last ] ],
                           CTXT #ctxt ],
       NON-LOCAL #nlocal,
                   LKEYS [ ALTKEYREL #akey,
                           ALT2KEYREL #a2key,
                           --COMPKEY #ckey,
                           --OCOMPKEY #ockey,
                           --OCOMP2KEY #oc2key ] ],
          ALTS #alts ],
    C-CONT.RELS <! !>,
    ARGS < #dtr >,
    ALTS #alts ].

di0fs0_ilr :=  d_ilr & fem_3sg_ilr
"""indefinite(?) det""".

fem_3sg_ilr :=  fem_ilr & 3sg_ilr.

fem_ilr :=  infl-ltow-rule & 
  [ SYNSEM.LOCAL.AGR.PNG.GEN fem ].

  3sg_ilr :=  infl-ltow-rule & 
  [ SYNSEM.LOCAL.AGR.PNG.PN 3sg ].

di0ms0_ilr :=  d_ilr & masc_3sg_ilr
"""indefinite(??) det""".

masc_3sg_ilr :=  masc_ilr & 3sg_ilr.

masc_ilr :=  infl-ltow-rule & 
  [ SYNSEM.LOCAL.AGR.PNG.GEN masc ].

d_ilr :=  infl-ltow-rule & 
  [ SYNSEM.LOCAL.CAT.HEAD det ].

vfin_ilr :=  verb_ilr & 
[ SYNSEM.LOCAL.CAT.HEAD [ PRD non-prd,
                          VFORM fin ] ].

ind-vfin_ilr :=  vfin_ilr & 
[ SYNSEM.LOCAL.CAT.HEAD [ TAM.MOOD ind ] ].

pres-ind_ilr :=  ind-vfin_ilr & 
[ SYNSEM.LOCAL.CAT.HEAD.TAM.TENSE pres ].

verb_ilr :=  infl-ltow-rule & 
[ SYNSEM.LOCAL.CAT.HEAD verb ].

pp3fs00_ilr :=  pp_ilr & 3sg_ilr & fem_ilr
"""personal pron""". 

pp_ilr :=  infl-ltow-rule.
